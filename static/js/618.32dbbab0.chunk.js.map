{"version":3,"file":"static/js/618.32dbbab0.chunk.js","mappings":"kNACA,EAA8B,6BAA9B,EAA4E,gC,kBCqC5E,EAjCgB,WACd,OAA8BA,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,QAWR,OATAE,EAAAA,EAAAA,YAAU,WACHF,IACLG,EAAAA,EAAAA,IAAaH,GACVI,MAAK,SAAAC,GACJN,EAAWM,EAAKC,QACjB,IACAC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,EAAMG,QAAtB,GACf,GAAE,CAACX,KAGF,+BACE,eAAIY,UAAWC,EAAf,SACGf,GAAWA,EAAQgB,OAAS,EAC3BhB,EAAQiB,KAAI,SAAAC,GACV,OACE,2BACE,gBAAIJ,UAAWC,EAAf,qBAA4CG,EAAKC,WACjD,uBAAID,EAAKE,YAFFF,EAAKG,GAKjB,KAED,wEAKT,C,sJCrCD,IAAMC,EAAU,CACdC,QAAS,CACPC,cACE,+NAIOC,EAAc,WAGzB,OAAOC,MAFK,kDAEMJ,GAAShB,MAAK,SAAAqB,GAC9B,OAAIA,EAASC,GACJD,EAASE,OAEXC,QAAQC,OAAO,IAAIC,MAAM,oBACjC,GACF,EAEYC,EAAoB,SAAA/B,GAC/B,IAAMgC,EAAG,6CAAyChC,GAElD,OAAOwB,MAAMQ,EAAKZ,GAAShB,MAAK,SAAAqB,GAC9B,OAAIA,EAASC,GACJD,EAASE,OAEXC,QAAQC,OAAO,IAAIC,MAAM,oBACjC,GACF,EAEYG,EAAY,SAAAjC,GACvB,IAAMgC,EAAG,6CAAyChC,EAAzC,YAET,OAAOwB,MAAMQ,EAAKZ,GAAShB,MAAK,SAAAqB,GAC9B,OAAIA,EAASC,GACJD,EAASE,OAEXC,QAAQC,OAAO,IAAIC,MAAM,oBACjC,GACF,EACY3B,EAAe,SAAAH,GAC1B,IAAMgC,EAAG,6CAAyChC,EAAzC,YAET,OAAOwB,MAAMQ,EAAKZ,GAAShB,MAAK,SAAAqB,GAC9B,OAAIA,EAASC,GACJD,EAASE,OAEXC,QAAQC,OAAO,IAAIC,MAAM,oBACjC,GACF,EACYI,EAAoB,SAAAC,GAC/B,IAEMC,EAAG,UAFG,4CAEH,kBAAmBD,GAC5B,OAAOX,MAAMY,EAAKhB,GAAShB,MAAK,SAAAqB,GAC9B,OAAIA,EAASC,GACJD,EAASE,OAEXC,QAAQC,OAAO,IAAIC,MAAM,oBACjC,GACF,C","sources":["webpack://react-homework-template/./src/components/Reviews/Revievs.module.css?056f","components/Reviews/Reviews.js","servises/moviesApi.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"reviewsList\":\"Revievs_reviewsList__FRRrv\",\"ReviewSubtitle\":\"Revievs_ReviewSubtitle__iQX0g\"};","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport css from './Revievs.module.css';\nimport { fetchReviews } from '../../servises/moviesApi';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState([]);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    if (!movieId) return;\n    fetchReviews(movieId)\n      .then(data => {\n        setReviews(data.results);\n      })\n      .catch(error => console.log(error.message));\n  }, [movieId]);\n\n  return (\n    <>\n      <ul className={css.reviewsList}>\n        {reviews && reviews.length > 0 ? (\n          reviews.map(item => {\n            return (\n              <li key={item.id}>\n                <h3 className={css.ReviewSubtitle}>Author: {item.author}</h3>\n                <p>{item.content}</p>\n              </li>\n            );\n          })\n        ) : (\n          <li>We don't have any reviews for this movie</li>\n        )}\n      </ul>\n    </>\n  );\n};\nexport default Reviews;\n","const options = {\n  headers: {\n    Authorization:\n      'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJmNTU3NDZiZDFhN2VhZDc4YjNiZmQ5MDRhZTAwMDRhNCIsInN1YiI6IjY1MGM2YWI2MmM2YjdiMDBjNGZkZmYzMyIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.DX99mnnx3ecqx74al80fvW6EsnGicUU6ObIsdIfAqC4',\n  },\n};\n\nexport const fetchMovies = () => {\n  const URL = 'https://api.themoviedb.org/3/trending/movie/day';\n\n  return fetch(URL, options).then(response => {\n    if (response.ok) {\n      return response.json();\n    }\n    return Promise.reject(new Error('Not found movies'));\n  });\n};\n\nexport const fetchMovieDetails = movieId => {\n  const URL = `https://api.themoviedb.org/3/movie/${movieId}`;\n\n  return fetch(URL, options).then(response => {\n    if (response.ok) {\n      return response.json();\n    }\n    return Promise.reject(new Error('Not found movies'));\n  });\n};\n\nexport const fetchCast = movieId => {\n  const URL = `https://api.themoviedb.org/3/movie/${movieId}/credits`;\n\n  return fetch(URL, options).then(response => {\n    if (response.ok) {\n      return response.json();\n    }\n    return Promise.reject(new Error('Not found movies'));\n  });\n};\nexport const fetchReviews = movieId => {\n  const URL = `https://api.themoviedb.org/3/movie/${movieId}/reviews`;\n\n  return fetch(URL, options).then(response => {\n    if (response.ok) {\n      return response.json();\n    }\n    return Promise.reject(new Error('Not found movies'));\n  });\n};\nexport const fetchSearchMovies = query => {\n  const URL = 'https://api.themoviedb.org/3/search/movie';\n\n  const url = `${URL}?query=${query}`;\n  return fetch(url, options).then(response => {\n    if (response.ok) {\n      return response.json();\n    }\n    return Promise.reject(new Error('Not found movies'));\n  });\n};\n"],"names":["useState","reviews","setReviews","movieId","useParams","useEffect","fetchReviews","then","data","results","catch","error","console","log","message","className","css","length","map","item","author","content","id","options","headers","Authorization","fetchMovies","fetch","response","ok","json","Promise","reject","Error","fetchMovieDetails","URL","fetchCast","fetchSearchMovies","query","url"],"sourceRoot":""}